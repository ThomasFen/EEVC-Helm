ingress:
  ## @param ingress.enabled Enable ingress record generation for fuh-realtime-emotions
  ##
  enabled: true
  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  ingressClassName: "nginx"
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: ""
  ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations: 
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
      nginx.ingress.kubernetes.io/cors-allow-origin: "http(s)://{{ tpl .Values.ingress.additionalHosts.jitsi.hostname .}}"
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: true
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: true

  ##
  additionalHosts:
    keycloak: 
      pathType: ImplementationSpecific 
      hostname: keycloak.emotion
      path: /
      servicePort: http
    jitsi: 
      pathType: ImplementationSpecific 
      hostname: '{{ (splitList "//" .Values.jitsi.publicURL) | last  }}'
      path: /
      servicePort: http
    emotionbackend:
      pathType: ImplementationSpecific 
      hostname: "{{ .Values.global.emotionbackendHostname }}" 
      path: /
      servicePort: http
    authentication:
      pathType: ImplementationSpecific 
      hostname: "{{ .Values.global.authHostname }}"
      path: /
      servicePort: http      
global:
  authHostname: authentication.emotion
  emotionbackendHostname: emotionbackend


## Overwrites default values of Bitnami's Node.js chart. 
## Referenced in Jitsi's tokenauthurl. Utilizes Keycloak to provide Jitsi with JWTs.
authentication:
  enabled: true
  service:
    type: ClusterIP
    ## @param authentication.service.nodeIP
    ##
    nodeIP:
    ## @param authentication.service.loadBalancerIP
    ##
    loadBalancerIP: 
  extraEnvVarsCM: "fuh-realtime-emotions-auth-config"
  mongodb:
    enabled: false
  image:
    repository: erge234/auth
    tag: helm
    pullPolicy: Always
  getAppFromExternalRepository: false

## Overwrites default values of Bitnami's Node.js chart. 
## Used to run socket.IO. Sits between browsers running Jitsi and backend services.
emotionbackend:
  enabled: true
  extraEnvVarsCM: "emotionbackend-configuration"
  mongodb:
    enabled: false
  image:
    repository: erge234/authentication
    tag: latest
    pullPolicy: Always
  containerPorts:
    http: 8010
  getAppFromExternalRepository: false


## Overwrites default values of Bitnami's Grafana chart.
## TODO revisit, since it has only been used in the context of a single master redis.
grafana:
  enabled: false
  plugins: "redis-app,redis-datasource,volkovlabs-image-panel"
  dashboardsProvider:
    enabled: true
  dashboardsConfigMaps:
    - configMapName: redis-camera
      fileName: camera.json
  datasources:
    secretDefinition:
      apiVersion: 1
      datasources:
        - name: Redis
          type: redis-datasource
          access: proxy
          orgId: 1
          isDefault: true
          version: 1
          url: redis://myredis-headless:6379 # Assumes Redis' service name is myredis.
          editable: true
  grafana:
    extraEnvVars:
      - name: GF_AUTH_ANONYMOUS_ENABLED
        value: "true"
      - name: GF_AUTH_ANONYMOUS_ORG_ROLE
        value: Admin
      - name: GF_AUTH_BASIC_ENABLED
        value: "false"

## Overwrites default values of the community supported 3rd party Jitsi chart. 
jitsi:
  enabled: true
  enableAuth: true
  enableGuests: false
  publicURL: "https://jitsi.emotion"
  web:
    image:
      repository: erge234/web # Is configured to connect to https://emotionbackend 
      tag: stable-6865-emotion
      pullPolicy: Always
    extraEnvs: {TOKEN_AUTH_URL: "https://{{ .Values.global.authHostname }}/room/{room}", EMOTIONBACKEND_URL: "https://{{ .Values.global.emotionbackendHostname }} "}
  jvb:
    UDPPort: 30000
    publicIP: jitsi.emotion # Your node's public ip. Must not resolve to localhost.
    service:
      type: NodePort
    websockets:
      enabled: true
  extraCommonEnvs: {
    AUTH_TYPE: jwt,
    JWT_APP_ID: jitsi-meet-emotion,
    JWT_APP_SECRET: 254uni5DFCY25hvb233bjHJBm6l34j5hb43hb3Fuy23ebwuyfMDWft2,
    JWT_ACCEPTED_ISSUERS: jitsi,
    JWT_ACCEPTED_AUDIENCES: jitsi,
    XMPP_CROSS_DOMAIN: "true" ,}

## Overwrites default values of Bitnami's Redis-Cluster chart. 
## Uses an image equipped with RedisAI and Redis Gears module.
redis:
  enabled: true
  image:
    repository: erge234/redis-cluster
    tag: 6.2-debian-11
  usePassword: false
  redis:
    configmap: |+
      loadmodule /usr/lib/redis/modules/redistimeseries.so
      loadmodule /usr/lib/redis/modules/redisai.so
      loadmodule /usr/lib/redis/modules/redisgears.so Plugin /var/opt/redislabs/modules/rg/plugin/gears_python.so
  cluster:
    nodes: 3
    replicas: 0

## Loads AI models and Redis Gears after chart installation. 
redisAIProvider:
  image: 
    repository: erge234/redis-ai-client
    pullPolicy: Always
  faceRecognitionEnabled: true

## Overwrites default values of Bitnami's Keycloak chart. 
keycloak:
  enabled: true
  service:
    type: ClusterIP
    ## @param keycloak.service.nodeIP
    ##
    nodeIP:
    ## @param keycloak.service.loadBalancerIP
    ##
    loadBalancerIP:
  auth:
    adminUser: admin
    adminPassword: "admin"
    tls: 
      enabled: true
      autoGenerated: true
  keycloakConfigCli:
    enabled: true
    existingConfigmap: "keycloak-config-cli-configmap"
  postgresql:
    auth:
      password: "admin"

# The configmap referenced in `keycloak.keycloakConfigCli.existingConfigmap`
# keycloak-config-cli realms configuration
# NOTE: nil keys will be considered files to import locally
keycloakConfigCli:
  configuration:
    files/jitsi-emotion.yaml:

