apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-ai-loader"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      containers:
        - name: post-install-job
          image: {{ .Values.redisAIProvider.image.repository | quote }}
          imagePullPolicy: {{ .Values.redisAIProvider.image.pullPolicy | quote }}
          command: ["/bin/bash"]
          args: [
              "-c",
              "sleep 35 && redis-cli -c -h redis-cluster ping || exit 1 &&
              host redis-cluster-headless | awk '/address / { print $4 }' | xargs -I 'REDIS_NODE' redis-cli -h REDIS_NODE rg.refreshcluster &&
              cd /tmp/ai &&
              readarray -t keytable < /tmp/keytable.txt &&
              readarray -t start_slots < <(redis-cli --no-raw -c -h redis-cluster cluster slots | grep -v '^[[:blank:]]' | cut -c 17-) &&
              cat gears-emotion.py | redis-cli -c -h redis-cluster -x RG.PYEXECUTE &&
              for slot in ${start_slots[@]}  ;  do \
                  cat blazeface_back_converted.onnx | redis-cli -c -h redis-cluster -x AI.MODELSTORE blazeface:model:{${keytable[slot]}}  ONNX CPU BLOB &&
                  cat emotion.onnx | redis-cli -c -h redis-cluster -x AI.MODELSTORE emotion:model:{${keytable[slot]}} ONNX CPU BLOB &&
                  cat blazeface-script.py | redis-cli -c -h redis-cluster -x AI.SCRIPTSET blazeface:script:{${keytable[slot]}} CPU SOURCE; done",
               ]
